# Zygarde 项目开发规则

## 项目概述
Zygarde 是一个现代化的模块化环境设置和部署工具，专注于维护开发环境的"秩序"和"完整性"。它提供声明式、开发者友好的一键部署本地数据库环境解决方案。

## 核心架构
项目采用模块化设计，包含以下核心模块：
- Template Manager（模板管理器）- 管理模板的CRUD操作和解析验证
- Blueprint Manager（蓝图管理器）- 管理蓝图编排和变量管理
- Environment Manager（环境管理器）- 管理环境实例和状态
- Deployment Engine（部署引擎）- 执行部署命令和项目隔离
- Coordinator（协调器）- 统一门面，提供API接口

## 编程语言和技术栈
- 主要语言：Go
- 容器编排：Docker Compose（第一阶段），Kubernetes（第二阶段）
- 项目结构：遵循Go标准项目布局

## 代码风格和规范

### Go 代码规范
- 遵循Go官方代码风格指南和gofmt格式化
- 使用Go modules进行依赖管理
- 变量和函数命名采用驼峰命名法
- 包名使用小写，简洁明了
- 导出的函数和类型必须有注释说明

### 项目结构规范
```
/cmd/           - 应用程序入口点
/internal/      - 私有应用程序和库代码
/pkg/           - 外部应用程序可以使用的库代码
```

### 模块设计原则
- 每个核心模块应该是独立的包
- 模块间通过接口进行交互，保持松耦合
- 实现依赖注入，便于测试和扩展

## 开发指导原则

### 1. 模块化设计
- 每个核心模块（Template Manager, Blueprint Manager等）应该有清晰的职责边界
- 使用接口定义模块间的交互契约
- 避免循环依赖

### 2. 错误处理
- 使用Go标准的error处理模式
- 提供有意义的错误信息
- 在Coordinator层实现事务性保证和错误回滚

### 3. 配置管理
- 支持YAML/JSON格式的配置文件
- 提供配置验证和默认值
- 支持环境变量覆盖配置

### 4. 模板系统
- 支持Go template语法（如{{ .Port }}）
- 实现模板变量提取和验证
- 提供模板继承和组合能力

### 5. 状态管理
- 环境状态应该持久化存储
- 支持状态查询和监控
- 实现状态转换的原子性

### 6. API设计
- 提供RESTful API接口
- 支持CLI和Web API两种访问方式
- 实现统一的响应格式

## 测试要求
- 单元测试覆盖率不低于80%
- 每个模块都应该有对应的测试文件
- 使用table-driven tests进行参数化测试
- 集成测试验证模块间交互

## 文档要求
- 每个包都应该有package注释
- 导出的函数和类型必须有文档注释
- 提供API文档和使用示例
- 维护架构决策记录(ADR)

## 性能考虑
- Docker Compose项目隔离使用-p参数避免命名冲突
- 实现并发安全的状态管理
- 考虑资源清理和垃圾回收

## 扩展性设计
- 部署引擎支持多种编排平台（Docker Compose -> Kubernetes）
- 模板系统支持多种格式和语法
- 插件化架构支持第三方扩展

## 安全考虑
- 输入验证和参数校验
- 模板注入攻击防护
- 容器安全最佳实践

## 命名约定
- 使用有意义的英文命名
- 核心概念使用项目术语（Template, Blueprint, Environment等）
- 避免缩写，保持代码可读性

## 提交规范
- 使用conventional commits格式
- 每个commit应该是原子性的
- 提供清晰的commit message说明变更内容

记住：Zygarde的使命是维护开发环境的"秩序"和"完整性"，代码应该体现这种理念 - 清晰、可靠、易于维护。
